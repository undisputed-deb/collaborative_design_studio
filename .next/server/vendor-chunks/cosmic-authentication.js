/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cosmic-authentication";
exports.ids = ["vendor-chunks/cosmic-authentication"];
exports.modules = {

/***/ "(rsc)/./node_modules/cosmic-authentication/dist/context/auth-context.js":
/*!*************************************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/context/auth-context.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { createProxy } = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js")

module.exports = createProxy("/Users/Deb/Downloads/Colloborative Whiteboard/node_modules/cosmic-authentication/dist/context/auth-context.js")


/***/ }),

/***/ "(rsc)/./node_modules/cosmic-authentication/dist/handlers/auth-handler.js":
/*!**************************************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/handlers/auth-handler.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAuthHandler = createAuthHandler;\nconst server_1 = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\"));\nconst auth_1 = __webpack_require__(/*! ../lib/auth */ \"(rsc)/./node_modules/cosmic-authentication/dist/lib/auth.js\");\n// Determine cookie settings based on environment\nconst getCookieSettings = () => {\n    const secureFlag = \"development\" === 'production';\n    const sameSiteFlag = secureFlag ? 'none' : 'lax';\n    return { secureFlag, sameSiteFlag };\n};\n// Generate a unique request ID for tracking\nlet requestCounter = 0;\nfunction createAuthHandler() {\n    return {\n        GET: async (request) => {\n            const { pathname } = new URL(request.url);\n            if (pathname.endsWith('/callback')) {\n                return handleCallback(request);\n            }\n            else if (pathname.endsWith('/status')) {\n                return handleStatus(request);\n            }\n            return server_1.NextResponse.json({ error: 'Not found' }, { status: 404 });\n        },\n        POST: async (request) => {\n            const { pathname } = new URL(request.url);\n            if (pathname.endsWith('/signout')) {\n                return handleSignout(request);\n            }\n            else if (pathname.endsWith('/clear-return-url')) {\n                return handleClearReturnUrl(request);\n            }\n            return server_1.NextResponse.json({ error: 'Not found' }, { status: 404 });\n        }\n    };\n}\nasync function handleCallback(request) {\n    var _a;\n    const { searchParams } = request.nextUrl;\n    const accessToken = searchParams.get('accessToken');\n    const refreshToken = searchParams.get('refreshToken');\n    const step = searchParams.get('step');\n    const { secureFlag, sameSiteFlag } = getCookieSettings();\n    // Step 2: Set access token and do final redirect\n    if (step === '2' && accessToken) {\n        // Get the return URL from the cookie or default to home page\n        const returnUrl = ((_a = request.cookies.get(auth_1.RETURN_URL_COOKIE)) === null || _a === void 0 ? void 0 : _a.value) || '/';\n        const redirectUrl = new URL(returnUrl, \"https://hrvfq.vm.freestyle.sh\");\n        const response = server_1.NextResponse.redirect(redirectUrl);\n        // Set access token\n        response.cookies.set('accessToken', accessToken, {\n            httpOnly: true,\n            secure: secureFlag,\n            maxAge: 5 * 60, // 5 minutes\n            path: '/',\n            sameSite: sameSiteFlag\n        });\n        // Clear the return URL cookie\n        response.cookies.delete(auth_1.RETURN_URL_COOKIE);\n        response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');\n        response.headers.set('Pragma', 'no-cache');\n        response.headers.set('Expires', '0');\n        return response;\n    }\n    // Step 1: Validate tokens and set refresh token\n    if (!accessToken || !refreshToken) {\n        return server_1.NextResponse.redirect(new URL('/', \"https://hrvfq.vm.freestyle.sh\"));\n    }\n    // Verify server config\n    if (!process.env.COSMICAUTH_SECRET) {\n        return server_1.NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n    try {\n        const decoded = jsonwebtoken_1.default.verify(accessToken, process.env.COSMICAUTH_SECRET);\n        const uid = decoded.uid;\n        if (!uid)\n            throw new Error('UID not found in token');\n        // Create a redirect to step 2\n        // This two-step process works around a Next.js bug where multiple cookies\n        // cannot be reliably set in a single redirect response when behind a proxy\n        const step2Url = new URL('/api/auth/callback', \"https://hrvfq.vm.freestyle.sh\");\n        step2Url.searchParams.set('accessToken', accessToken);\n        step2Url.searchParams.set('step', '2');\n        const response = server_1.NextResponse.redirect(step2Url);\n        // Set refresh token in step 1\n        response.cookies.set('refreshToken', refreshToken, {\n            httpOnly: true,\n            secure: secureFlag,\n            maxAge: 7 * 24 * 60 * 60, // 7 days\n            path: '/',\n            sameSite: sameSiteFlag\n        });\n        response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');\n        response.headers.set('Pragma', 'no-cache');\n        response.headers.set('Expires', '0');\n        return response;\n    }\n    catch (tokenError) {\n        console.error('Token validation failed:', tokenError);\n        return server_1.NextResponse.json({ error: 'Invalid token' }, { status: 401 });\n    }\n}\nasync function handleSignout(request) {\n    const { searchParams } = request.nextUrl;\n    const step = searchParams.get('step');\n    const { secureFlag, sameSiteFlag } = getCookieSettings();\n    // Define common cookie options based on environment\n    const cookieOptions = {\n        httpOnly: true,\n        secure: secureFlag,\n        path: '/',\n        sameSite: sameSiteFlag\n    };\n    // Step 2: Delete access token and return success\n    if (step === '2') {\n        const response = server_1.NextResponse.json({\n            success: true,\n            message: 'Signed out successfully'\n        });\n        // Delete access token in step 2\n        response.cookies.delete(Object.assign({ name: 'accessToken' }, cookieOptions));\n        return response;\n    }\n    // Step 1: Delete refresh token first\n    // This two-step process works around a Next.js bug where multiple cookies\n    // cannot be reliably deleted in a single response when behind a proxy\n    const step2Url = new URL('/api/auth/signout', \"https://hrvfq.vm.freestyle.sh\");\n    step2Url.searchParams.set('step', '2');\n    // Instead of redirecting, we'll return a response that tells the client to make another request\n    const response = server_1.NextResponse.json({\n        nextStep: step2Url.toString()\n    });\n    // Delete refresh token in step 1 (most important to delete first)\n    response.cookies.delete(Object.assign({ name: 'refreshToken' }, cookieOptions));\n    return response;\n}\nasync function handleStatus(request) {\n    var _a, _b;\n    const requestId = ++requestCounter;\n    const { secureFlag, sameSiteFlag } = getCookieSettings();\n    const accessToken = (_a = request.cookies.get('accessToken')) === null || _a === void 0 ? void 0 : _a.value;\n    const clearResponse = () => {\n        const resp = server_1.NextResponse.json({ authenticated: false }, { status: 401 });\n        // Ensure delete uses the same flags as set for the environment\n        const cookieOpts = { httpOnly: true, secure: secureFlag, path: '/', sameSite: sameSiteFlag };\n        resp.cookies.delete(Object.assign({ name: 'accessToken' }, cookieOpts));\n        resp.cookies.delete(Object.assign({ name: 'refreshToken' }, cookieOpts));\n        return resp;\n    };\n    // Validate existing access token\n    if (accessToken) {\n        try {\n            if (!process.env.COSMICAUTH_SECRET)\n                throw new Error('COSMICAUTH_SECRET is not configured');\n            // Decode the token and assume its payload matches UserData\n            const decoded = jsonwebtoken_1.default.verify(accessToken, process.env.COSMICAUTH_SECRET);\n            // Return the full decoded payload as the user object\n            return server_1.NextResponse.json({ authenticated: true, user: decoded });\n        }\n        catch (err) {\n            console.error(`[${requestId}] Access token invalid, will attempt refresh:`, err);\n        }\n    }\n    // Attempt refresh\n    const refreshToken = (_b = request.cookies.get('refreshToken')) === null || _b === void 0 ? void 0 : _b.value;\n    if (refreshToken) {\n        try {\n            const refreshRes = await fetch(`https://auth.cosmic.new/api/auth/refresh`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ refreshToken }),\n            });\n            if (refreshRes.ok) {\n                const { accessToken: newAT } = await refreshRes.json();\n                // Decode the *new* access token to get the full user data\n                if (!process.env.COSMICAUTH_SECRET)\n                    throw new Error('COSMICAUTH_SECRET is not configured post-refresh');\n                const decodedNew = jsonwebtoken_1.default.verify(newAT, process.env.COSMICAUTH_SECRET);\n                const resp = server_1.NextResponse.json({ authenticated: true, user: decodedNew });\n                // IMPORTANT: Only set the access token here to avoid the cookie mixing bug\n                // The refresh token already exists and doesn't need to be reset\n                // console.log(\"successfully refreshed access token\");\n                resp.cookies.set('accessToken', newAT, {\n                    httpOnly: true,\n                    secure: secureFlag,\n                    maxAge: 5 * 60, // 5 minutes\n                    path: '/',\n                    sameSite: sameSiteFlag\n                });\n                // DO NOT reset the refresh token here - it's already valid and setting both\n                // cookies in one response causes the Next.js bug where attributes get mixed up\n                return resp;\n            }\n        }\n        catch (err) {\n            console.error(`[${requestId}] Refresh error:`, err);\n        }\n    }\n    // No valid session available\n    return clearResponse();\n}\nasync function handleClearReturnUrl(request) {\n    const { secureFlag, sameSiteFlag } = getCookieSettings();\n    const response = server_1.NextResponse.json({\n        success: true,\n        message: 'Return URL cookie cleared'\n    });\n    // Clear the return URL cookie with proper settings\n    response.cookies.delete(auth_1.RETURN_URL_COOKIE);\n    // Also explicitly set it to expire immediately with all possible combinations\n    response.cookies.set(auth_1.RETURN_URL_COOKIE, '', {\n        httpOnly: true,\n        secure: secureFlag,\n        sameSite: sameSiteFlag,\n        maxAge: 0,\n        expires: new Date(0),\n        path: '/'\n    });\n    return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cosmic-authentication/dist/handlers/auth-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cosmic-authentication/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getServerSession = exports.getAuthState = exports.useAuth = exports.AuthProvider = exports.createAuthMiddleware = exports.createAuthHandler = void 0;\n// Export auth handler\nvar auth_handler_1 = __webpack_require__(/*! ./handlers/auth-handler */ \"(rsc)/./node_modules/cosmic-authentication/dist/handlers/auth-handler.js\");\nObject.defineProperty(exports, \"createAuthHandler\", ({ enumerable: true, get: function () { return auth_handler_1.createAuthHandler; } }));\n// Export middleware\nvar auth_middleware_1 = __webpack_require__(/*! ./middleware/auth-middleware */ \"(rsc)/./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js\");\nObject.defineProperty(exports, \"createAuthMiddleware\", ({ enumerable: true, get: function () { return auth_middleware_1.createAuthMiddleware; } }));\n// Export context and hooks\nvar auth_context_1 = __webpack_require__(/*! ./context/auth-context */ \"(rsc)/./node_modules/cosmic-authentication/dist/context/auth-context.js\");\nObject.defineProperty(exports, \"AuthProvider\", ({ enumerable: true, get: function () { return auth_context_1.AuthProvider; } }));\nObject.defineProperty(exports, \"useAuth\", ({ enumerable: true, get: function () { return auth_context_1.useAuth; } }));\n// Export server-side utilities\nvar auth_1 = __webpack_require__(/*! ./lib/auth */ \"(rsc)/./node_modules/cosmic-authentication/dist/lib/auth.js\");\nObject.defineProperty(exports, \"getAuthState\", ({ enumerable: true, get: function () { return auth_1.getAuthState; } }));\nObject.defineProperty(exports, \"getServerSession\", ({ enumerable: true, get: function () { return auth_1.getServerSession; } }));\n// Export constants\n// export { accessToken_COOKIE_NAME, refreshToken_COOKIE_NAME } from './lib/auth';\n// Import for default export\nconst auth_handler_2 = __webpack_require__(/*! ./handlers/auth-handler */ \"(rsc)/./node_modules/cosmic-authentication/dist/handlers/auth-handler.js\");\nconst auth_middleware_2 = __webpack_require__(/*! ./middleware/auth-middleware */ \"(rsc)/./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js\");\nconst auth_context_2 = __webpack_require__(/*! ./context/auth-context */ \"(rsc)/./node_modules/cosmic-authentication/dist/context/auth-context.js\");\nconst auth_2 = __webpack_require__(/*! ./lib/auth */ \"(rsc)/./node_modules/cosmic-authentication/dist/lib/auth.js\");\n// Default export for convenience\nexports[\"default\"] = {\n    createAuthHandler: auth_handler_2.createAuthHandler,\n    createAuthMiddleware: auth_middleware_2.createAuthMiddleware,\n    AuthProvider: auth_context_2.AuthProvider,\n    useAuth: auth_context_2.useAuth,\n    getAuthState: auth_2.getAuthState,\n    getServerSession: auth_2.getServerSession\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY29zbWljLWF1dGhlbnRpY2F0aW9uL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcsZUFBZSxHQUFHLG9CQUFvQixHQUFHLDRCQUE0QixHQUFHLHlCQUF5QjtBQUNuSjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHlHQUF5QjtBQUN0RCxxREFBb0QsRUFBRSxxQ0FBcUMsNENBQTRDLEVBQUM7QUFDeEk7QUFDQSx3QkFBd0IsbUJBQU8sQ0FBQyxtSEFBOEI7QUFDOUQsd0RBQXVELEVBQUUscUNBQXFDLGtEQUFrRCxFQUFDO0FBQ2pKO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsdUdBQXdCO0FBQ3JELGdEQUErQyxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUM5SCwyQ0FBMEMsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDcEg7QUFDQSxhQUFhLG1CQUFPLENBQUMsK0VBQVk7QUFDakMsZ0RBQStDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ3RILG9EQUFtRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUM5SDtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFO0FBQ0EsdUJBQXVCLG1CQUFPLENBQUMseUdBQXlCO0FBQ3hELDBCQUEwQixtQkFBTyxDQUFDLG1IQUE4QjtBQUNoRSx1QkFBdUIsbUJBQU8sQ0FBQyx1R0FBd0I7QUFDdkQsZUFBZSxtQkFBTyxDQUFDLCtFQUFZO0FBQ25DO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0RlYi9Eb3dubG9hZHMvQ29sbG9ib3JhdGl2ZSBXaGl0ZWJvYXJkL25vZGVfbW9kdWxlcy9jb3NtaWMtYXV0aGVudGljYXRpb24vZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U2VydmVyU2Vzc2lvbiA9IGV4cG9ydHMuZ2V0QXV0aFN0YXRlID0gZXhwb3J0cy51c2VBdXRoID0gZXhwb3J0cy5BdXRoUHJvdmlkZXIgPSBleHBvcnRzLmNyZWF0ZUF1dGhNaWRkbGV3YXJlID0gZXhwb3J0cy5jcmVhdGVBdXRoSGFuZGxlciA9IHZvaWQgMDtcbi8vIEV4cG9ydCBhdXRoIGhhbmRsZXJcbnZhciBhdXRoX2hhbmRsZXJfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL2F1dGgtaGFuZGxlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUF1dGhIYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoX2hhbmRsZXJfMS5jcmVhdGVBdXRoSGFuZGxlcjsgfSB9KTtcbi8vIEV4cG9ydCBtaWRkbGV3YXJlXG52YXIgYXV0aF9taWRkbGV3YXJlXzEgPSByZXF1aXJlKFwiLi9taWRkbGV3YXJlL2F1dGgtbWlkZGxld2FyZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUF1dGhNaWRkbGV3YXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoX21pZGRsZXdhcmVfMS5jcmVhdGVBdXRoTWlkZGxld2FyZTsgfSB9KTtcbi8vIEV4cG9ydCBjb250ZXh0IGFuZCBob29rc1xudmFyIGF1dGhfY29udGV4dF8xID0gcmVxdWlyZShcIi4vY29udGV4dC9hdXRoLWNvbnRleHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBdXRoUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhfY29udGV4dF8xLkF1dGhQcm92aWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUF1dGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhfY29udGV4dF8xLnVzZUF1dGg7IH0gfSk7XG4vLyBFeHBvcnQgc2VydmVyLXNpZGUgdXRpbGl0aWVzXG52YXIgYXV0aF8xID0gcmVxdWlyZShcIi4vbGliL2F1dGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRBdXRoU3RhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhfMS5nZXRBdXRoU3RhdGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRTZXJ2ZXJTZXNzaW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoXzEuZ2V0U2VydmVyU2Vzc2lvbjsgfSB9KTtcbi8vIEV4cG9ydCBjb25zdGFudHNcbi8vIGV4cG9ydCB7IGFjY2Vzc1Rva2VuX0NPT0tJRV9OQU1FLCByZWZyZXNoVG9rZW5fQ09PS0lFX05BTUUgfSBmcm9tICcuL2xpYi9hdXRoJztcbi8vIEltcG9ydCBmb3IgZGVmYXVsdCBleHBvcnRcbmNvbnN0IGF1dGhfaGFuZGxlcl8yID0gcmVxdWlyZShcIi4vaGFuZGxlcnMvYXV0aC1oYW5kbGVyXCIpO1xuY29uc3QgYXV0aF9taWRkbGV3YXJlXzIgPSByZXF1aXJlKFwiLi9taWRkbGV3YXJlL2F1dGgtbWlkZGxld2FyZVwiKTtcbmNvbnN0IGF1dGhfY29udGV4dF8yID0gcmVxdWlyZShcIi4vY29udGV4dC9hdXRoLWNvbnRleHRcIik7XG5jb25zdCBhdXRoXzIgPSByZXF1aXJlKFwiLi9saWIvYXV0aFwiKTtcbi8vIERlZmF1bHQgZXhwb3J0IGZvciBjb252ZW5pZW5jZVxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIGNyZWF0ZUF1dGhIYW5kbGVyOiBhdXRoX2hhbmRsZXJfMi5jcmVhdGVBdXRoSGFuZGxlcixcbiAgICBjcmVhdGVBdXRoTWlkZGxld2FyZTogYXV0aF9taWRkbGV3YXJlXzIuY3JlYXRlQXV0aE1pZGRsZXdhcmUsXG4gICAgQXV0aFByb3ZpZGVyOiBhdXRoX2NvbnRleHRfMi5BdXRoUHJvdmlkZXIsXG4gICAgdXNlQXV0aDogYXV0aF9jb250ZXh0XzIudXNlQXV0aCxcbiAgICBnZXRBdXRoU3RhdGU6IGF1dGhfMi5nZXRBdXRoU3RhdGUsXG4gICAgZ2V0U2VydmVyU2Vzc2lvbjogYXV0aF8yLmdldFNlcnZlclNlc3Npb25cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cosmic-authentication/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cosmic-authentication/dist/lib/auth.js":
/*!*************************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/lib/auth.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RETURN_URL_COOKIE = exports.refreshToken_COOKIE_NAME = exports.accessToken_COOKIE_NAME = void 0;\nexports.getAuthState = getAuthState;\nexports.getServerSession = getServerSession;\nconst headers_1 = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n// Constants\nexports.accessToken_COOKIE_NAME = 'accessToken';\nexports.refreshToken_COOKIE_NAME = 'refreshToken';\nexports.RETURN_URL_COOKIE = 'auth_return_url';\n// Get auth state by calling the /api/auth/status endpoint (server-side)\nasync function getAuthState() {\n    const cookieStore = await (0, headers_1.cookies)(); // Use Next.js cookies helper\n    const baseUrl = \"https://hrvfq.vm.freestyle.sh\" || 0; // Fallback for local dev\n    const statusUrl = `${baseUrl}/api/auth/status`;\n    try {\n        const cookieString = cookieStore.toString();\n        const response = await fetch(statusUrl, {\n            headers: {\n                // Forward cookies from the incoming request to the API route\n                Cookie: cookieString,\n            },\n            cache: 'no-store', // Ensure fresh check every time\n        });\n        if (response.ok) {\n            const data = await response.json();\n            if (data.authenticated && data.user) {\n                return {\n                    isAuthenticated: true,\n                    user: data.user,\n                };\n            }\n        }\n        // Handle non-OK responses or unauthenticated status\n        return { isAuthenticated: false, user: null };\n    }\n    catch (error) {\n        console.error('[getAuthState] Error fetching auth status:', error);\n        return { isAuthenticated: false, user: null };\n    }\n}\n// Get user session data directly (server-side)\nasync function getServerSession() {\n    const authState = await getAuthState();\n    return authState.user;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY29zbWljLWF1dGhlbnRpY2F0aW9uL2Rpc3QvbGliL2F1dGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcsZ0NBQWdDLEdBQUcsK0JBQStCO0FBQzlGLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsa0JBQWtCLG1CQUFPLENBQUMsbUVBQWM7QUFDeEM7QUFDQSwrQkFBK0I7QUFDL0IsZ0NBQWdDO0FBQ2hDLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hELG9CQUFvQiwrQkFBZ0MsSUFBSSxDQUF1QixFQUFFO0FBQ2pGLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZWIvRG93bmxvYWRzL0NvbGxvYm9yYXRpdmUgV2hpdGVib2FyZC9ub2RlX21vZHVsZXMvY29zbWljLWF1dGhlbnRpY2F0aW9uL2Rpc3QvbGliL2F1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJFVFVSTl9VUkxfQ09PS0lFID0gZXhwb3J0cy5yZWZyZXNoVG9rZW5fQ09PS0lFX05BTUUgPSBleHBvcnRzLmFjY2Vzc1Rva2VuX0NPT0tJRV9OQU1FID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRBdXRoU3RhdGUgPSBnZXRBdXRoU3RhdGU7XG5leHBvcnRzLmdldFNlcnZlclNlc3Npb24gPSBnZXRTZXJ2ZXJTZXNzaW9uO1xuY29uc3QgaGVhZGVyc18xID0gcmVxdWlyZShcIm5leHQvaGVhZGVyc1wiKTtcbi8vIENvbnN0YW50c1xuZXhwb3J0cy5hY2Nlc3NUb2tlbl9DT09LSUVfTkFNRSA9ICdhY2Nlc3NUb2tlbic7XG5leHBvcnRzLnJlZnJlc2hUb2tlbl9DT09LSUVfTkFNRSA9ICdyZWZyZXNoVG9rZW4nO1xuZXhwb3J0cy5SRVRVUk5fVVJMX0NPT0tJRSA9ICdhdXRoX3JldHVybl91cmwnO1xuLy8gR2V0IGF1dGggc3RhdGUgYnkgY2FsbGluZyB0aGUgL2FwaS9hdXRoL3N0YXR1cyBlbmRwb2ludCAoc2VydmVyLXNpZGUpXG5hc3luYyBmdW5jdGlvbiBnZXRBdXRoU3RhdGUoKSB7XG4gICAgY29uc3QgY29va2llU3RvcmUgPSBhd2FpdCAoMCwgaGVhZGVyc18xLmNvb2tpZXMpKCk7IC8vIFVzZSBOZXh0LmpzIGNvb2tpZXMgaGVscGVyXG4gICAgY29uc3QgYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnOyAvLyBGYWxsYmFjayBmb3IgbG9jYWwgZGV2XG4gICAgY29uc3Qgc3RhdHVzVXJsID0gYCR7YmFzZVVybH0vYXBpL2F1dGgvc3RhdHVzYDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb29raWVTdHJpbmcgPSBjb29raWVTdG9yZS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHN0YXR1c1VybCwge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIC8vIEZvcndhcmQgY29va2llcyBmcm9tIHRoZSBpbmNvbWluZyByZXF1ZXN0IHRvIHRoZSBBUEkgcm91dGVcbiAgICAgICAgICAgICAgICBDb29raWU6IGNvb2tpZVN0cmluZyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWNoZTogJ25vLXN0b3JlJywgLy8gRW5zdXJlIGZyZXNoIGNoZWNrIGV2ZXJ5IHRpbWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmF1dGhlbnRpY2F0ZWQgJiYgZGF0YS51c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaXNBdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiBkYXRhLnVzZXIsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgbm9uLU9LIHJlc3BvbnNlcyBvciB1bmF1dGhlbnRpY2F0ZWQgc3RhdHVzXG4gICAgICAgIHJldHVybiB7IGlzQXV0aGVudGljYXRlZDogZmFsc2UsIHVzZXI6IG51bGwgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tnZXRBdXRoU3RhdGVdIEVycm9yIGZldGNoaW5nIGF1dGggc3RhdHVzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSwgdXNlcjogbnVsbCB9O1xuICAgIH1cbn1cbi8vIEdldCB1c2VyIHNlc3Npb24gZGF0YSBkaXJlY3RseSAoc2VydmVyLXNpZGUpXG5hc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJTZXNzaW9uKCkge1xuICAgIGNvbnN0IGF1dGhTdGF0ZSA9IGF3YWl0IGdldEF1dGhTdGF0ZSgpO1xuICAgIHJldHVybiBhdXRoU3RhdGUudXNlcjtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cosmic-authentication/dist/lib/auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAuthMiddleware = createAuthMiddleware;\nconst server_1 = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\nconst auth_1 = __webpack_require__(/*! ../lib/auth */ \"(rsc)/./node_modules/cosmic-authentication/dist/lib/auth.js\");\n// Default auth configuration\nconst DEFAULT_CONFIG = {\n    loginPath: process.env.NEXT_PUBLIC_AUTH_LOGIN_PATH || 'https://auth.cosmic.new/signin',\n    clientId: \"42c5c102-76cb-4faf-b001-b23a109f37b6\" || 0,\n    protectedRoutes: []\n};\nfunction createAuthMiddleware(userConfig = {}) {\n    // Merge user config with defaults\n    const config = Object.assign(Object.assign({}, DEFAULT_CONFIG), userConfig);\n    return async function middleware(request) {\n        const { pathname } = request.nextUrl;\n        // Check if the requested path is protected\n        const isProtectedRoute = config.protectedRoutes.some(route => pathname === route || pathname.startsWith(`${route}/`));\n        // Skip auth check for non-protected routes\n        if (!isProtectedRoute) {\n            return server_1.NextResponse.next();\n        }\n        try {\n            // Check authentication status\n            const statusResponse = await fetch(`${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/status`, {\n                headers: {\n                    cookie: request.headers.get('cookie') || ''\n                },\n                cache: 'no-store',\n                credentials: 'same-origin'\n            });\n            if (statusResponse.ok) {\n                const data = await statusResponse.json();\n                if (data.authenticated) {\n                    // Forward any cookies that may have been set during refresh\n                    const response = server_1.NextResponse.next();\n                    const setCookieHeader = statusResponse.headers.get('set-cookie');\n                    if (setCookieHeader) {\n                        response.headers.set('Set-Cookie', setCookieHeader);\n                    }\n                    return response;\n                }\n            }\n            // Authentication failed - redirect to login\n            return redirectToLogin(request, config);\n        }\n        catch (err) {\n            console.error('Authentication check error:', err);\n            return redirectToLogin(request, config);\n        }\n    };\n}\nfunction redirectToLogin(request, config) {\n    const loginUrl = new URL(config.loginPath);\n    loginUrl.searchParams.set('client_id', config.clientId);\n    loginUrl.searchParams.set('redirect_url', `${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/callback`);\n    const response = server_1.NextResponse.redirect(loginUrl.toString());\n    // Store the current URL for return after login\n    const returnUrl = request.nextUrl.pathname + request.nextUrl.search;\n    const isProduction = \"development\" === 'production';\n    response.cookies.set(auth_1.RETURN_URL_COOKIE, returnUrl, {\n        httpOnly: true,\n        secure: isProduction,\n        sameSite: isProduction ? 'none' : 'lax',\n        maxAge: 10 * 60, // 10 minutes\n        path: '/'\n    });\n    // Clear auth cookies\n    response.cookies.delete(auth_1.accessToken_COOKIE_NAME);\n    response.cookies.delete(auth_1.refreshToken_COOKIE_NAME);\n    return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY29zbWljLWF1dGhlbnRpY2F0aW9uL2Rpc3QvbWlkZGxld2FyZS9hdXRoLW1pZGRsZXdhcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGlCQUFpQixtQkFBTyxDQUFDLGlFQUFhO0FBQ3RDLGVBQWUsbUJBQU8sQ0FBQyxnRkFBYTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxjQUFjLHNDQUFpQyxJQUFJLENBQUU7QUFDckQ7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLGdCQUFnQixXQUFXO0FBQzNCO0FBQ0EsbUhBQW1ILE1BQU07QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELCtCQUFnQyxDQUFDO0FBQ25GO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsK0JBQWdDLENBQUM7QUFDbEY7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGFBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRGViL0Rvd25sb2Fkcy9Db2xsb2JvcmF0aXZlIFdoaXRlYm9hcmQvbm9kZV9tb2R1bGVzL2Nvc21pYy1hdXRoZW50aWNhdGlvbi9kaXN0L21pZGRsZXdhcmUvYXV0aC1taWRkbGV3YXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVBdXRoTWlkZGxld2FyZSA9IGNyZWF0ZUF1dGhNaWRkbGV3YXJlO1xuY29uc3Qgc2VydmVyXzEgPSByZXF1aXJlKFwibmV4dC9zZXJ2ZXJcIik7XG5jb25zdCBhdXRoXzEgPSByZXF1aXJlKFwiLi4vbGliL2F1dGhcIik7XG4vLyBEZWZhdWx0IGF1dGggY29uZmlndXJhdGlvblxuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gICAgbG9naW5QYXRoOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BVVRIX0xPR0lOX1BBVEggfHwgJ2h0dHBzOi8vYXV0aC5jb3NtaWMubmV3L3NpZ25pbicsXG4gICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMSUVOVF9JRCB8fCAnJyxcbiAgICBwcm90ZWN0ZWRSb3V0ZXM6IFtdXG59O1xuZnVuY3Rpb24gY3JlYXRlQXV0aE1pZGRsZXdhcmUodXNlckNvbmZpZyA9IHt9KSB7XG4gICAgLy8gTWVyZ2UgdXNlciBjb25maWcgd2l0aCBkZWZhdWx0c1xuICAgIGNvbnN0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcpLCB1c2VyQ29uZmlnKTtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gbWlkZGxld2FyZShyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHJlcXVlc3QubmV4dFVybDtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHJlcXVlc3RlZCBwYXRoIGlzIHByb3RlY3RlZFxuICAgICAgICBjb25zdCBpc1Byb3RlY3RlZFJvdXRlID0gY29uZmlnLnByb3RlY3RlZFJvdXRlcy5zb21lKHJvdXRlID0+IHBhdGhuYW1lID09PSByb3V0ZSB8fCBwYXRobmFtZS5zdGFydHNXaXRoKGAke3JvdXRlfS9gKSk7XG4gICAgICAgIC8vIFNraXAgYXV0aCBjaGVjayBmb3Igbm9uLXByb3RlY3RlZCByb3V0ZXNcbiAgICAgICAgaWYgKCFpc1Byb3RlY3RlZFJvdXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VydmVyXzEuTmV4dFJlc3BvbnNlLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgYXV0aGVudGljYXRpb24gc3RhdHVzXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNSZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMfS9hcGkvYXV0aC9zdGF0dXNgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBjb29raWU6IHJlcXVlc3QuaGVhZGVycy5nZXQoJ2Nvb2tpZScpIHx8ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWNoZTogJ25vLXN0b3JlJyxcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc3RhdHVzUmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgc3RhdHVzUmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmF1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yd2FyZCBhbnkgY29va2llcyB0aGF0IG1heSBoYXZlIGJlZW4gc2V0IGR1cmluZyByZWZyZXNoXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gc2VydmVyXzEuTmV4dFJlc3BvbnNlLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2V0Q29va2llSGVhZGVyID0gc3RhdHVzUmVzcG9uc2UuaGVhZGVycy5nZXQoJ3NldC1jb29raWUnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldENvb2tpZUhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1NldC1Db29raWUnLCBzZXRDb29raWVIZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdXRoZW50aWNhdGlvbiBmYWlsZWQgLSByZWRpcmVjdCB0byBsb2dpblxuICAgICAgICAgICAgcmV0dXJuIHJlZGlyZWN0VG9Mb2dpbihyZXF1ZXN0LCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGhlbnRpY2F0aW9uIGNoZWNrIGVycm9yOicsIGVycik7XG4gICAgICAgICAgICByZXR1cm4gcmVkaXJlY3RUb0xvZ2luKHJlcXVlc3QsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcmVkaXJlY3RUb0xvZ2luKHJlcXVlc3QsIGNvbmZpZykge1xuICAgIGNvbnN0IGxvZ2luVXJsID0gbmV3IFVSTChjb25maWcubG9naW5QYXRoKTtcbiAgICBsb2dpblVybC5zZWFyY2hQYXJhbXMuc2V0KCdjbGllbnRfaWQnLCBjb25maWcuY2xpZW50SWQpO1xuICAgIGxvZ2luVXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3JlZGlyZWN0X3VybCcsIGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMfS9hcGkvYXV0aC9jYWxsYmFja2ApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gc2VydmVyXzEuTmV4dFJlc3BvbnNlLnJlZGlyZWN0KGxvZ2luVXJsLnRvU3RyaW5nKCkpO1xuICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IFVSTCBmb3IgcmV0dXJuIGFmdGVyIGxvZ2luXG4gICAgY29uc3QgcmV0dXJuVXJsID0gcmVxdWVzdC5uZXh0VXJsLnBhdGhuYW1lICsgcmVxdWVzdC5uZXh0VXJsLnNlYXJjaDtcbiAgICBjb25zdCBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuICAgIHJlc3BvbnNlLmNvb2tpZXMuc2V0KGF1dGhfMS5SRVRVUk5fVVJMX0NPT0tJRSwgcmV0dXJuVXJsLCB7XG4gICAgICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgICAgICBzZWN1cmU6IGlzUHJvZHVjdGlvbixcbiAgICAgICAgc2FtZVNpdGU6IGlzUHJvZHVjdGlvbiA/ICdub25lJyA6ICdsYXgnLFxuICAgICAgICBtYXhBZ2U6IDEwICogNjAsIC8vIDEwIG1pbnV0ZXNcbiAgICAgICAgcGF0aDogJy8nXG4gICAgfSk7XG4gICAgLy8gQ2xlYXIgYXV0aCBjb29raWVzXG4gICAgcmVzcG9uc2UuY29va2llcy5kZWxldGUoYXV0aF8xLmFjY2Vzc1Rva2VuX0NPT0tJRV9OQU1FKTtcbiAgICByZXNwb25zZS5jb29raWVzLmRlbGV0ZShhdXRoXzEucmVmcmVzaFRva2VuX0NPT0tJRV9OQU1FKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cosmic-authentication/dist/context/auth-context.js":
/*!*************************************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/context/auth-context.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AuthProvider = AuthProvider;\nexports.useAuth = useAuth;\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\nconst AuthContext = (0, react_1.createContext)(undefined);\n// Helper function to detect if running inside an iframe\nconst isInsideIframe = ()=>{\n    try {\n        return window.self !== window.top;\n    } catch (e) {\n        // If we can't access window.top due to cross-origin restrictions, we're likely in an iframe\n        return true;\n    }\n};\n// Simple notification component for iframe detection\nconst IframeNotification = ({ onClose })=>(0, jsx_runtime_1.jsx)(\"div\", {\n        className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999]\",\n        children: (0, jsx_runtime_1.jsxs)(\"div\", {\n            className: \"bg-white rounded-lg p-6 m-4 max-w-md shadow-xl\",\n            children: [\n                (0, jsx_runtime_1.jsxs)(\"div\", {\n                    className: \"flex items-center mb-4\",\n                    children: [\n                        (0, jsx_runtime_1.jsx)(\"div\", {\n                            className: \"flex-shrink-0\",\n                            children: (0, jsx_runtime_1.jsx)(\"svg\", {\n                                className: \"h-6 w-6 text-amber-400\",\n                                fill: \"none\",\n                                viewBox: \"0 0 24 24\",\n                                stroke: \"currentColor\",\n                                children: (0, jsx_runtime_1.jsx)(\"path\", {\n                                    strokeLinecap: \"round\",\n                                    strokeLinejoin: \"round\",\n                                    strokeWidth: 2,\n                                    d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z\"\n                                })\n                            })\n                        }),\n                        (0, jsx_runtime_1.jsx)(\"h3\", {\n                            className: \"ml-3 text-lg font-medium text-gray-900\",\n                            children: \"Authentication Required\"\n                        })\n                    ]\n                }),\n                (0, jsx_runtime_1.jsxs)(\"div\", {\n                    className: \"text-gray-700 mb-6\",\n                    children: [\n                        (0, jsx_runtime_1.jsx)(\"p\", {\n                            className: \"mb-3\",\n                            children: \"To test Cosmic authentication, please open this preview in a new tab.\"\n                        }),\n                        (0, jsx_runtime_1.jsx)(\"p\", {\n                            className: \"text-sm text-gray-600\",\n                            children: \"Cosmic auth cannot be displayed within an iframe due to security policies.\"\n                        })\n                    ]\n                }),\n                (0, jsx_runtime_1.jsxs)(\"div\", {\n                    className: \"flex justify-end space-x-3\",\n                    children: [\n                        (0, jsx_runtime_1.jsx)(\"button\", {\n                            onClick: onClose,\n                            className: \"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\",\n                            children: \"Close\"\n                        }),\n                        (0, jsx_runtime_1.jsx)(\"button\", {\n                            onClick: ()=>{\n                                window.open(window.location.href, '_blank');\n                                onClose();\n                            },\n                            className: \"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\",\n                            children: \"Open in New Tab\"\n                        })\n                    ]\n                })\n            ]\n        })\n    });\nfunction AuthProvider({ children }) {\n    const [authState, setAuthState] = (0, react_1.useState)({\n        isAuthenticated: false,\n        user: null\n    });\n    const [loading, setLoading] = (0, react_1.useState)(true);\n    const [showIframeNotification, setShowIframeNotification] = (0, react_1.useState)(false);\n    const checkAuthStatus = (0, react_1.useCallback)(async ()=>{\n        setLoading(true);\n        try {\n            const response = await fetch(`${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/status`, {\n                cache: 'no-store',\n                credentials: 'same-origin'\n            });\n            if (!response.ok) {\n                setAuthState({\n                    isAuthenticated: false,\n                    user: null\n                });\n                return {\n                    isAuthenticated: false,\n                    user: null\n                };\n            }\n            const { authenticated, user } = await response.json();\n            const newState = {\n                isAuthenticated: authenticated,\n                user\n            };\n            setAuthState(newState);\n            // Clear the return URL cookie after successful authentication check\n            // This prevents stale redirect cookies from affecting future auth flows\n            if (authenticated) {\n                try {\n                    await fetch(`${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/clear-return-url`, {\n                        method: 'POST',\n                        credentials: 'same-origin'\n                    });\n                } catch (error) {\n                    console.error('[checkAuthStatus] Failed to clear return URL cookie:', error);\n                }\n            }\n            return newState;\n        } catch (error) {\n            console.error('[checkAuthStatus] error', error);\n            const newState = {\n                isAuthenticated: false,\n                user: null\n            };\n            setAuthState(newState);\n            return newState;\n        } finally{\n            setLoading(false);\n        }\n    }, []);\n    (0, react_1.useEffect)(()=>{\n        checkAuthStatus();\n        const handleVisibility = ()=>{\n            if (document.visibilityState === 'visible') {\n                checkAuthStatus();\n            }\n        };\n        document.addEventListener('visibilitychange', handleVisibility);\n        return ()=>document.removeEventListener('visibilitychange', handleVisibility);\n    }, [\n        checkAuthStatus\n    ]);\n    const signIn = async ()=>{\n        try {\n            // Check if we're inside an iframe\n            if (isInsideIframe()) {\n                setShowIframeNotification(true);\n                return;\n            }\n            // Get client ID from config\n            const clientId = \"42c5c102-76cb-4faf-b001-b23a109f37b6\";\n            if (!clientId) {\n                console.error(\"Client ID is not configured.\");\n                return;\n            }\n            // Clear any stale return URL cookies before starting new auth flow\n            try {\n                await fetch(`${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/clear-return-url`, {\n                    method: 'POST',\n                    credentials: 'same-origin'\n                });\n            } catch (error) {\n                console.error('[signIn] Failed to clear return URL cookie:', error);\n            }\n            // Use the callback page as the redirect URL\n            const redirectUrl = `${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/callback`;\n            // Build the auth service URL with client ID and redirect URL\n            const authUrl = `https://auth.cosmic.new/signin?client_id=${encodeURIComponent(clientId)}&redirect_url=${encodeURIComponent(redirectUrl)}`;\n            // Clear any existing auth state before redirecting\n            setAuthState({\n                isAuthenticated: false,\n                user: null\n            });\n            // Redirect to the auth URL\n            window.location.href = authUrl;\n        } catch (error) {\n            console.error('Error during sign-in:', error);\n        }\n    };\n    const signOut = async ()=>{\n        try {\n            setLoading(true);\n            // Step 1: Delete refresh token\n            const response = await fetch(`${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/signout`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'Pragma': 'no-cache'\n                },\n                credentials: 'same-origin' // Ensure cookies are sent\n            });\n            if (response.ok) {\n                const data = await response.json();\n                // Step 2: If there's a next step URL, call it to delete the access token\n                if (data.nextStep) {\n                    const step2Response = await fetch(data.nextStep, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Cache-Control': 'no-cache',\n                            'Pragma': 'no-cache'\n                        },\n                        credentials: 'same-origin'\n                    });\n                    if (!step2Response.ok) {\n                        console.error('Step 2 sign out failed:', await step2Response.text());\n                    }\n                }\n                setAuthState({\n                    isAuthenticated: false,\n                    user: null\n                });\n                window.location.href = \"/\"; // Redirect to the homepage\n            } else {\n                console.error('Sign out failed:', await response.text());\n            }\n        } catch (error) {\n            console.error('Sign out error:', error);\n        } finally{\n            setLoading(false);\n        }\n    };\n    return (0, jsx_runtime_1.jsxs)(AuthContext.Provider, {\n        value: {\n            isAuthenticated: authState.isAuthenticated,\n            user: authState.user,\n            signIn,\n            signOut,\n            checkAuthStatus,\n            loading\n        },\n        children: [\n            children,\n            showIframeNotification && (0, jsx_runtime_1.jsx)(IframeNotification, {\n                onClose: ()=>setShowIframeNotification(false)\n            })\n        ]\n    });\n}\nfunction useAuth() {\n    const context = (0, react_1.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cosmic-authentication/dist/context/auth-context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cosmic-authentication/dist/handlers/auth-handler.js":
/*!**************************************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/handlers/auth-handler.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAuthHandler = createAuthHandler;\nconst server_1 = __webpack_require__(/*! next/server */ \"(ssr)/./node_modules/next/dist/api/server.js\");\nconst jsonwebtoken_1 = __importDefault(__webpack_require__(/*! jsonwebtoken */ \"(ssr)/./node_modules/jsonwebtoken/index.js\"));\nconst auth_1 = __webpack_require__(/*! ../lib/auth */ \"(ssr)/./node_modules/cosmic-authentication/dist/lib/auth.js\");\n// Determine cookie settings based on environment\nconst getCookieSettings = () => {\n    const secureFlag = \"development\" === 'production';\n    const sameSiteFlag = secureFlag ? 'none' : 'lax';\n    return { secureFlag, sameSiteFlag };\n};\n// Generate a unique request ID for tracking\nlet requestCounter = 0;\nfunction createAuthHandler() {\n    return {\n        GET: async (request) => {\n            const { pathname } = new URL(request.url);\n            if (pathname.endsWith('/callback')) {\n                return handleCallback(request);\n            }\n            else if (pathname.endsWith('/status')) {\n                return handleStatus(request);\n            }\n            return server_1.NextResponse.json({ error: 'Not found' }, { status: 404 });\n        },\n        POST: async (request) => {\n            const { pathname } = new URL(request.url);\n            if (pathname.endsWith('/signout')) {\n                return handleSignout(request);\n            }\n            else if (pathname.endsWith('/clear-return-url')) {\n                return handleClearReturnUrl(request);\n            }\n            return server_1.NextResponse.json({ error: 'Not found' }, { status: 404 });\n        }\n    };\n}\nasync function handleCallback(request) {\n    var _a;\n    const { searchParams } = request.nextUrl;\n    const accessToken = searchParams.get('accessToken');\n    const refreshToken = searchParams.get('refreshToken');\n    const step = searchParams.get('step');\n    const { secureFlag, sameSiteFlag } = getCookieSettings();\n    // Step 2: Set access token and do final redirect\n    if (step === '2' && accessToken) {\n        // Get the return URL from the cookie or default to home page\n        const returnUrl = ((_a = request.cookies.get(auth_1.RETURN_URL_COOKIE)) === null || _a === void 0 ? void 0 : _a.value) || '/';\n        const redirectUrl = new URL(returnUrl, \"https://hrvfq.vm.freestyle.sh\");\n        const response = server_1.NextResponse.redirect(redirectUrl);\n        // Set access token\n        response.cookies.set('accessToken', accessToken, {\n            httpOnly: true,\n            secure: secureFlag,\n            maxAge: 5 * 60, // 5 minutes\n            path: '/',\n            sameSite: sameSiteFlag\n        });\n        // Clear the return URL cookie\n        response.cookies.delete(auth_1.RETURN_URL_COOKIE);\n        response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');\n        response.headers.set('Pragma', 'no-cache');\n        response.headers.set('Expires', '0');\n        return response;\n    }\n    // Step 1: Validate tokens and set refresh token\n    if (!accessToken || !refreshToken) {\n        return server_1.NextResponse.redirect(new URL('/', \"https://hrvfq.vm.freestyle.sh\"));\n    }\n    // Verify server config\n    if (!process.env.COSMICAUTH_SECRET) {\n        return server_1.NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n    try {\n        const decoded = jsonwebtoken_1.default.verify(accessToken, process.env.COSMICAUTH_SECRET);\n        const uid = decoded.uid;\n        if (!uid)\n            throw new Error('UID not found in token');\n        // Create a redirect to step 2\n        // This two-step process works around a Next.js bug where multiple cookies\n        // cannot be reliably set in a single redirect response when behind a proxy\n        const step2Url = new URL('/api/auth/callback', \"https://hrvfq.vm.freestyle.sh\");\n        step2Url.searchParams.set('accessToken', accessToken);\n        step2Url.searchParams.set('step', '2');\n        const response = server_1.NextResponse.redirect(step2Url);\n        // Set refresh token in step 1\n        response.cookies.set('refreshToken', refreshToken, {\n            httpOnly: true,\n            secure: secureFlag,\n            maxAge: 7 * 24 * 60 * 60, // 7 days\n            path: '/',\n            sameSite: sameSiteFlag\n        });\n        response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');\n        response.headers.set('Pragma', 'no-cache');\n        response.headers.set('Expires', '0');\n        return response;\n    }\n    catch (tokenError) {\n        console.error('Token validation failed:', tokenError);\n        return server_1.NextResponse.json({ error: 'Invalid token' }, { status: 401 });\n    }\n}\nasync function handleSignout(request) {\n    const { searchParams } = request.nextUrl;\n    const step = searchParams.get('step');\n    const { secureFlag, sameSiteFlag } = getCookieSettings();\n    // Define common cookie options based on environment\n    const cookieOptions = {\n        httpOnly: true,\n        secure: secureFlag,\n        path: '/',\n        sameSite: sameSiteFlag\n    };\n    // Step 2: Delete access token and return success\n    if (step === '2') {\n        const response = server_1.NextResponse.json({\n            success: true,\n            message: 'Signed out successfully'\n        });\n        // Delete access token in step 2\n        response.cookies.delete(Object.assign({ name: 'accessToken' }, cookieOptions));\n        return response;\n    }\n    // Step 1: Delete refresh token first\n    // This two-step process works around a Next.js bug where multiple cookies\n    // cannot be reliably deleted in a single response when behind a proxy\n    const step2Url = new URL('/api/auth/signout', \"https://hrvfq.vm.freestyle.sh\");\n    step2Url.searchParams.set('step', '2');\n    // Instead of redirecting, we'll return a response that tells the client to make another request\n    const response = server_1.NextResponse.json({\n        nextStep: step2Url.toString()\n    });\n    // Delete refresh token in step 1 (most important to delete first)\n    response.cookies.delete(Object.assign({ name: 'refreshToken' }, cookieOptions));\n    return response;\n}\nasync function handleStatus(request) {\n    var _a, _b;\n    const requestId = ++requestCounter;\n    const { secureFlag, sameSiteFlag } = getCookieSettings();\n    const accessToken = (_a = request.cookies.get('accessToken')) === null || _a === void 0 ? void 0 : _a.value;\n    const clearResponse = () => {\n        const resp = server_1.NextResponse.json({ authenticated: false }, { status: 401 });\n        // Ensure delete uses the same flags as set for the environment\n        const cookieOpts = { httpOnly: true, secure: secureFlag, path: '/', sameSite: sameSiteFlag };\n        resp.cookies.delete(Object.assign({ name: 'accessToken' }, cookieOpts));\n        resp.cookies.delete(Object.assign({ name: 'refreshToken' }, cookieOpts));\n        return resp;\n    };\n    // Validate existing access token\n    if (accessToken) {\n        try {\n            if (!process.env.COSMICAUTH_SECRET)\n                throw new Error('COSMICAUTH_SECRET is not configured');\n            // Decode the token and assume its payload matches UserData\n            const decoded = jsonwebtoken_1.default.verify(accessToken, process.env.COSMICAUTH_SECRET);\n            // Return the full decoded payload as the user object\n            return server_1.NextResponse.json({ authenticated: true, user: decoded });\n        }\n        catch (err) {\n            console.error(`[${requestId}] Access token invalid, will attempt refresh:`, err);\n        }\n    }\n    // Attempt refresh\n    const refreshToken = (_b = request.cookies.get('refreshToken')) === null || _b === void 0 ? void 0 : _b.value;\n    if (refreshToken) {\n        try {\n            const refreshRes = await fetch(`https://auth.cosmic.new/api/auth/refresh`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ refreshToken }),\n            });\n            if (refreshRes.ok) {\n                const { accessToken: newAT } = await refreshRes.json();\n                // Decode the *new* access token to get the full user data\n                if (!process.env.COSMICAUTH_SECRET)\n                    throw new Error('COSMICAUTH_SECRET is not configured post-refresh');\n                const decodedNew = jsonwebtoken_1.default.verify(newAT, process.env.COSMICAUTH_SECRET);\n                const resp = server_1.NextResponse.json({ authenticated: true, user: decodedNew });\n                // IMPORTANT: Only set the access token here to avoid the cookie mixing bug\n                // The refresh token already exists and doesn't need to be reset\n                // console.log(\"successfully refreshed access token\");\n                resp.cookies.set('accessToken', newAT, {\n                    httpOnly: true,\n                    secure: secureFlag,\n                    maxAge: 5 * 60, // 5 minutes\n                    path: '/',\n                    sameSite: sameSiteFlag\n                });\n                // DO NOT reset the refresh token here - it's already valid and setting both\n                // cookies in one response causes the Next.js bug where attributes get mixed up\n                return resp;\n            }\n        }\n        catch (err) {\n            console.error(`[${requestId}] Refresh error:`, err);\n        }\n    }\n    // No valid session available\n    return clearResponse();\n}\nasync function handleClearReturnUrl(request) {\n    const { secureFlag, sameSiteFlag } = getCookieSettings();\n    const response = server_1.NextResponse.json({\n        success: true,\n        message: 'Return URL cookie cleared'\n    });\n    // Clear the return URL cookie with proper settings\n    response.cookies.delete(auth_1.RETURN_URL_COOKIE);\n    // Also explicitly set it to expire immediately with all possible combinations\n    response.cookies.set(auth_1.RETURN_URL_COOKIE, '', {\n        httpOnly: true,\n        secure: secureFlag,\n        sameSite: sameSiteFlag,\n        maxAge: 0,\n        expires: new Date(0),\n        path: '/'\n    });\n    return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cosmic-authentication/dist/handlers/auth-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cosmic-authentication/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getServerSession = exports.getAuthState = exports.useAuth = exports.AuthProvider = exports.createAuthMiddleware = exports.createAuthHandler = void 0;\n// Export auth handler\nvar auth_handler_1 = __webpack_require__(/*! ./handlers/auth-handler */ \"(ssr)/./node_modules/cosmic-authentication/dist/handlers/auth-handler.js\");\nObject.defineProperty(exports, \"createAuthHandler\", ({ enumerable: true, get: function () { return auth_handler_1.createAuthHandler; } }));\n// Export middleware\nvar auth_middleware_1 = __webpack_require__(/*! ./middleware/auth-middleware */ \"(ssr)/./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js\");\nObject.defineProperty(exports, \"createAuthMiddleware\", ({ enumerable: true, get: function () { return auth_middleware_1.createAuthMiddleware; } }));\n// Export context and hooks\nvar auth_context_1 = __webpack_require__(/*! ./context/auth-context */ \"(ssr)/./node_modules/cosmic-authentication/dist/context/auth-context.js\");\nObject.defineProperty(exports, \"AuthProvider\", ({ enumerable: true, get: function () { return auth_context_1.AuthProvider; } }));\nObject.defineProperty(exports, \"useAuth\", ({ enumerable: true, get: function () { return auth_context_1.useAuth; } }));\n// Export server-side utilities\nvar auth_1 = __webpack_require__(/*! ./lib/auth */ \"(ssr)/./node_modules/cosmic-authentication/dist/lib/auth.js\");\nObject.defineProperty(exports, \"getAuthState\", ({ enumerable: true, get: function () { return auth_1.getAuthState; } }));\nObject.defineProperty(exports, \"getServerSession\", ({ enumerable: true, get: function () { return auth_1.getServerSession; } }));\n// Export constants\n// export { accessToken_COOKIE_NAME, refreshToken_COOKIE_NAME } from './lib/auth';\n// Import for default export\nconst auth_handler_2 = __webpack_require__(/*! ./handlers/auth-handler */ \"(ssr)/./node_modules/cosmic-authentication/dist/handlers/auth-handler.js\");\nconst auth_middleware_2 = __webpack_require__(/*! ./middleware/auth-middleware */ \"(ssr)/./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js\");\nconst auth_context_2 = __webpack_require__(/*! ./context/auth-context */ \"(ssr)/./node_modules/cosmic-authentication/dist/context/auth-context.js\");\nconst auth_2 = __webpack_require__(/*! ./lib/auth */ \"(ssr)/./node_modules/cosmic-authentication/dist/lib/auth.js\");\n// Default export for convenience\nexports[\"default\"] = {\n    createAuthHandler: auth_handler_2.createAuthHandler,\n    createAuthMiddleware: auth_middleware_2.createAuthMiddleware,\n    AuthProvider: auth_context_2.AuthProvider,\n    useAuth: auth_context_2.useAuth,\n    getAuthState: auth_2.getAuthState,\n    getServerSession: auth_2.getServerSession\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29zbWljLWF1dGhlbnRpY2F0aW9uL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcsZUFBZSxHQUFHLG9CQUFvQixHQUFHLDRCQUE0QixHQUFHLHlCQUF5QjtBQUNuSjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHlHQUF5QjtBQUN0RCxxREFBb0QsRUFBRSxxQ0FBcUMsNENBQTRDLEVBQUM7QUFDeEk7QUFDQSx3QkFBd0IsbUJBQU8sQ0FBQyxtSEFBOEI7QUFDOUQsd0RBQXVELEVBQUUscUNBQXFDLGtEQUFrRCxFQUFDO0FBQ2pKO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsdUdBQXdCO0FBQ3JELGdEQUErQyxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUM5SCwyQ0FBMEMsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDcEg7QUFDQSxhQUFhLG1CQUFPLENBQUMsK0VBQVk7QUFDakMsZ0RBQStDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ3RILG9EQUFtRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUM5SDtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFO0FBQ0EsdUJBQXVCLG1CQUFPLENBQUMseUdBQXlCO0FBQ3hELDBCQUEwQixtQkFBTyxDQUFDLG1IQUE4QjtBQUNoRSx1QkFBdUIsbUJBQU8sQ0FBQyx1R0FBd0I7QUFDdkQsZUFBZSxtQkFBTyxDQUFDLCtFQUFZO0FBQ25DO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0RlYi9Eb3dubG9hZHMvQ29sbG9ib3JhdGl2ZSBXaGl0ZWJvYXJkL25vZGVfbW9kdWxlcy9jb3NtaWMtYXV0aGVudGljYXRpb24vZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U2VydmVyU2Vzc2lvbiA9IGV4cG9ydHMuZ2V0QXV0aFN0YXRlID0gZXhwb3J0cy51c2VBdXRoID0gZXhwb3J0cy5BdXRoUHJvdmlkZXIgPSBleHBvcnRzLmNyZWF0ZUF1dGhNaWRkbGV3YXJlID0gZXhwb3J0cy5jcmVhdGVBdXRoSGFuZGxlciA9IHZvaWQgMDtcbi8vIEV4cG9ydCBhdXRoIGhhbmRsZXJcbnZhciBhdXRoX2hhbmRsZXJfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL2F1dGgtaGFuZGxlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUF1dGhIYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoX2hhbmRsZXJfMS5jcmVhdGVBdXRoSGFuZGxlcjsgfSB9KTtcbi8vIEV4cG9ydCBtaWRkbGV3YXJlXG52YXIgYXV0aF9taWRkbGV3YXJlXzEgPSByZXF1aXJlKFwiLi9taWRkbGV3YXJlL2F1dGgtbWlkZGxld2FyZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUF1dGhNaWRkbGV3YXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoX21pZGRsZXdhcmVfMS5jcmVhdGVBdXRoTWlkZGxld2FyZTsgfSB9KTtcbi8vIEV4cG9ydCBjb250ZXh0IGFuZCBob29rc1xudmFyIGF1dGhfY29udGV4dF8xID0gcmVxdWlyZShcIi4vY29udGV4dC9hdXRoLWNvbnRleHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBdXRoUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhfY29udGV4dF8xLkF1dGhQcm92aWRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUF1dGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhfY29udGV4dF8xLnVzZUF1dGg7IH0gfSk7XG4vLyBFeHBvcnQgc2VydmVyLXNpZGUgdXRpbGl0aWVzXG52YXIgYXV0aF8xID0gcmVxdWlyZShcIi4vbGliL2F1dGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRBdXRoU3RhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhfMS5nZXRBdXRoU3RhdGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRTZXJ2ZXJTZXNzaW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdXRoXzEuZ2V0U2VydmVyU2Vzc2lvbjsgfSB9KTtcbi8vIEV4cG9ydCBjb25zdGFudHNcbi8vIGV4cG9ydCB7IGFjY2Vzc1Rva2VuX0NPT0tJRV9OQU1FLCByZWZyZXNoVG9rZW5fQ09PS0lFX05BTUUgfSBmcm9tICcuL2xpYi9hdXRoJztcbi8vIEltcG9ydCBmb3IgZGVmYXVsdCBleHBvcnRcbmNvbnN0IGF1dGhfaGFuZGxlcl8yID0gcmVxdWlyZShcIi4vaGFuZGxlcnMvYXV0aC1oYW5kbGVyXCIpO1xuY29uc3QgYXV0aF9taWRkbGV3YXJlXzIgPSByZXF1aXJlKFwiLi9taWRkbGV3YXJlL2F1dGgtbWlkZGxld2FyZVwiKTtcbmNvbnN0IGF1dGhfY29udGV4dF8yID0gcmVxdWlyZShcIi4vY29udGV4dC9hdXRoLWNvbnRleHRcIik7XG5jb25zdCBhdXRoXzIgPSByZXF1aXJlKFwiLi9saWIvYXV0aFwiKTtcbi8vIERlZmF1bHQgZXhwb3J0IGZvciBjb252ZW5pZW5jZVxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIGNyZWF0ZUF1dGhIYW5kbGVyOiBhdXRoX2hhbmRsZXJfMi5jcmVhdGVBdXRoSGFuZGxlcixcbiAgICBjcmVhdGVBdXRoTWlkZGxld2FyZTogYXV0aF9taWRkbGV3YXJlXzIuY3JlYXRlQXV0aE1pZGRsZXdhcmUsXG4gICAgQXV0aFByb3ZpZGVyOiBhdXRoX2NvbnRleHRfMi5BdXRoUHJvdmlkZXIsXG4gICAgdXNlQXV0aDogYXV0aF9jb250ZXh0XzIudXNlQXV0aCxcbiAgICBnZXRBdXRoU3RhdGU6IGF1dGhfMi5nZXRBdXRoU3RhdGUsXG4gICAgZ2V0U2VydmVyU2Vzc2lvbjogYXV0aF8yLmdldFNlcnZlclNlc3Npb25cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cosmic-authentication/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cosmic-authentication/dist/lib/auth.js":
/*!*************************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/lib/auth.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RETURN_URL_COOKIE = exports.refreshToken_COOKIE_NAME = exports.accessToken_COOKIE_NAME = void 0;\nexports.getAuthState = getAuthState;\nexports.getServerSession = getServerSession;\nconst headers_1 = __webpack_require__(/*! next/headers */ \"(ssr)/./node_modules/next/dist/api/headers.js\");\n// Constants\nexports.accessToken_COOKIE_NAME = 'accessToken';\nexports.refreshToken_COOKIE_NAME = 'refreshToken';\nexports.RETURN_URL_COOKIE = 'auth_return_url';\n// Get auth state by calling the /api/auth/status endpoint (server-side)\nasync function getAuthState() {\n    const cookieStore = await (0, headers_1.cookies)(); // Use Next.js cookies helper\n    const baseUrl = \"https://hrvfq.vm.freestyle.sh\" || 0; // Fallback for local dev\n    const statusUrl = `${baseUrl}/api/auth/status`;\n    try {\n        const cookieString = cookieStore.toString();\n        const response = await fetch(statusUrl, {\n            headers: {\n                // Forward cookies from the incoming request to the API route\n                Cookie: cookieString,\n            },\n            cache: 'no-store', // Ensure fresh check every time\n        });\n        if (response.ok) {\n            const data = await response.json();\n            if (data.authenticated && data.user) {\n                return {\n                    isAuthenticated: true,\n                    user: data.user,\n                };\n            }\n        }\n        // Handle non-OK responses or unauthenticated status\n        return { isAuthenticated: false, user: null };\n    }\n    catch (error) {\n        console.error('[getAuthState] Error fetching auth status:', error);\n        return { isAuthenticated: false, user: null };\n    }\n}\n// Get user session data directly (server-side)\nasync function getServerSession() {\n    const authState = await getAuthState();\n    return authState.user;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29zbWljLWF1dGhlbnRpY2F0aW9uL2Rpc3QvbGliL2F1dGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcsZ0NBQWdDLEdBQUcsK0JBQStCO0FBQzlGLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsa0JBQWtCLG1CQUFPLENBQUMsbUVBQWM7QUFDeEM7QUFDQSwrQkFBK0I7QUFDL0IsZ0NBQWdDO0FBQ2hDLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hELG9CQUFvQiwrQkFBZ0MsSUFBSSxDQUF1QixFQUFFO0FBQ2pGLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9EZWIvRG93bmxvYWRzL0NvbGxvYm9yYXRpdmUgV2hpdGVib2FyZC9ub2RlX21vZHVsZXMvY29zbWljLWF1dGhlbnRpY2F0aW9uL2Rpc3QvbGliL2F1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJFVFVSTl9VUkxfQ09PS0lFID0gZXhwb3J0cy5yZWZyZXNoVG9rZW5fQ09PS0lFX05BTUUgPSBleHBvcnRzLmFjY2Vzc1Rva2VuX0NPT0tJRV9OQU1FID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRBdXRoU3RhdGUgPSBnZXRBdXRoU3RhdGU7XG5leHBvcnRzLmdldFNlcnZlclNlc3Npb24gPSBnZXRTZXJ2ZXJTZXNzaW9uO1xuY29uc3QgaGVhZGVyc18xID0gcmVxdWlyZShcIm5leHQvaGVhZGVyc1wiKTtcbi8vIENvbnN0YW50c1xuZXhwb3J0cy5hY2Nlc3NUb2tlbl9DT09LSUVfTkFNRSA9ICdhY2Nlc3NUb2tlbic7XG5leHBvcnRzLnJlZnJlc2hUb2tlbl9DT09LSUVfTkFNRSA9ICdyZWZyZXNoVG9rZW4nO1xuZXhwb3J0cy5SRVRVUk5fVVJMX0NPT0tJRSA9ICdhdXRoX3JldHVybl91cmwnO1xuLy8gR2V0IGF1dGggc3RhdGUgYnkgY2FsbGluZyB0aGUgL2FwaS9hdXRoL3N0YXR1cyBlbmRwb2ludCAoc2VydmVyLXNpZGUpXG5hc3luYyBmdW5jdGlvbiBnZXRBdXRoU3RhdGUoKSB7XG4gICAgY29uc3QgY29va2llU3RvcmUgPSBhd2FpdCAoMCwgaGVhZGVyc18xLmNvb2tpZXMpKCk7IC8vIFVzZSBOZXh0LmpzIGNvb2tpZXMgaGVscGVyXG4gICAgY29uc3QgYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnOyAvLyBGYWxsYmFjayBmb3IgbG9jYWwgZGV2XG4gICAgY29uc3Qgc3RhdHVzVXJsID0gYCR7YmFzZVVybH0vYXBpL2F1dGgvc3RhdHVzYDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb29raWVTdHJpbmcgPSBjb29raWVTdG9yZS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHN0YXR1c1VybCwge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIC8vIEZvcndhcmQgY29va2llcyBmcm9tIHRoZSBpbmNvbWluZyByZXF1ZXN0IHRvIHRoZSBBUEkgcm91dGVcbiAgICAgICAgICAgICAgICBDb29raWU6IGNvb2tpZVN0cmluZyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWNoZTogJ25vLXN0b3JlJywgLy8gRW5zdXJlIGZyZXNoIGNoZWNrIGV2ZXJ5IHRpbWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmF1dGhlbnRpY2F0ZWQgJiYgZGF0YS51c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaXNBdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiBkYXRhLnVzZXIsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgbm9uLU9LIHJlc3BvbnNlcyBvciB1bmF1dGhlbnRpY2F0ZWQgc3RhdHVzXG4gICAgICAgIHJldHVybiB7IGlzQXV0aGVudGljYXRlZDogZmFsc2UsIHVzZXI6IG51bGwgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tnZXRBdXRoU3RhdGVdIEVycm9yIGZldGNoaW5nIGF1dGggc3RhdHVzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSwgdXNlcjogbnVsbCB9O1xuICAgIH1cbn1cbi8vIEdldCB1c2VyIHNlc3Npb24gZGF0YSBkaXJlY3RseSAoc2VydmVyLXNpZGUpXG5hc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJTZXNzaW9uKCkge1xuICAgIGNvbnN0IGF1dGhTdGF0ZSA9IGF3YWl0IGdldEF1dGhTdGF0ZSgpO1xuICAgIHJldHVybiBhdXRoU3RhdGUudXNlcjtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cosmic-authentication/dist/lib/auth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAuthMiddleware = createAuthMiddleware;\nconst server_1 = __webpack_require__(/*! next/server */ \"(ssr)/./node_modules/next/dist/api/server.js\");\nconst auth_1 = __webpack_require__(/*! ../lib/auth */ \"(ssr)/./node_modules/cosmic-authentication/dist/lib/auth.js\");\n// Default auth configuration\nconst DEFAULT_CONFIG = {\n    loginPath: process.env.NEXT_PUBLIC_AUTH_LOGIN_PATH || 'https://auth.cosmic.new/signin',\n    clientId: \"42c5c102-76cb-4faf-b001-b23a109f37b6\" || 0,\n    protectedRoutes: []\n};\nfunction createAuthMiddleware(userConfig = {}) {\n    // Merge user config with defaults\n    const config = Object.assign(Object.assign({}, DEFAULT_CONFIG), userConfig);\n    return async function middleware(request) {\n        const { pathname } = request.nextUrl;\n        // Check if the requested path is protected\n        const isProtectedRoute = config.protectedRoutes.some(route => pathname === route || pathname.startsWith(`${route}/`));\n        // Skip auth check for non-protected routes\n        if (!isProtectedRoute) {\n            return server_1.NextResponse.next();\n        }\n        try {\n            // Check authentication status\n            const statusResponse = await fetch(`${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/status`, {\n                headers: {\n                    cookie: request.headers.get('cookie') || ''\n                },\n                cache: 'no-store',\n                credentials: 'same-origin'\n            });\n            if (statusResponse.ok) {\n                const data = await statusResponse.json();\n                if (data.authenticated) {\n                    // Forward any cookies that may have been set during refresh\n                    const response = server_1.NextResponse.next();\n                    const setCookieHeader = statusResponse.headers.get('set-cookie');\n                    if (setCookieHeader) {\n                        response.headers.set('Set-Cookie', setCookieHeader);\n                    }\n                    return response;\n                }\n            }\n            // Authentication failed - redirect to login\n            return redirectToLogin(request, config);\n        }\n        catch (err) {\n            console.error('Authentication check error:', err);\n            return redirectToLogin(request, config);\n        }\n    };\n}\nfunction redirectToLogin(request, config) {\n    const loginUrl = new URL(config.loginPath);\n    loginUrl.searchParams.set('client_id', config.clientId);\n    loginUrl.searchParams.set('redirect_url', `${\"https://hrvfq.vm.freestyle.sh\"}/api/auth/callback`);\n    const response = server_1.NextResponse.redirect(loginUrl.toString());\n    // Store the current URL for return after login\n    const returnUrl = request.nextUrl.pathname + request.nextUrl.search;\n    const isProduction = \"development\" === 'production';\n    response.cookies.set(auth_1.RETURN_URL_COOKIE, returnUrl, {\n        httpOnly: true,\n        secure: isProduction,\n        sameSite: isProduction ? 'none' : 'lax',\n        maxAge: 10 * 60, // 10 minutes\n        path: '/'\n    });\n    // Clear auth cookies\n    response.cookies.delete(auth_1.accessToken_COOKIE_NAME);\n    response.cookies.delete(auth_1.refreshToken_COOKIE_NAME);\n    return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29zbWljLWF1dGhlbnRpY2F0aW9uL2Rpc3QvbWlkZGxld2FyZS9hdXRoLW1pZGRsZXdhcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGlCQUFpQixtQkFBTyxDQUFDLGlFQUFhO0FBQ3RDLGVBQWUsbUJBQU8sQ0FBQyxnRkFBYTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxjQUFjLHNDQUFpQyxJQUFJLENBQUU7QUFDckQ7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLGdCQUFnQixXQUFXO0FBQzNCO0FBQ0EsbUhBQW1ILE1BQU07QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELCtCQUFnQyxDQUFDO0FBQ25GO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsK0JBQWdDLENBQUM7QUFDbEY7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGFBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRGViL0Rvd25sb2Fkcy9Db2xsb2JvcmF0aXZlIFdoaXRlYm9hcmQvbm9kZV9tb2R1bGVzL2Nvc21pYy1hdXRoZW50aWNhdGlvbi9kaXN0L21pZGRsZXdhcmUvYXV0aC1taWRkbGV3YXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVBdXRoTWlkZGxld2FyZSA9IGNyZWF0ZUF1dGhNaWRkbGV3YXJlO1xuY29uc3Qgc2VydmVyXzEgPSByZXF1aXJlKFwibmV4dC9zZXJ2ZXJcIik7XG5jb25zdCBhdXRoXzEgPSByZXF1aXJlKFwiLi4vbGliL2F1dGhcIik7XG4vLyBEZWZhdWx0IGF1dGggY29uZmlndXJhdGlvblxuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gICAgbG9naW5QYXRoOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BVVRIX0xPR0lOX1BBVEggfHwgJ2h0dHBzOi8vYXV0aC5jb3NtaWMubmV3L3NpZ25pbicsXG4gICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMSUVOVF9JRCB8fCAnJyxcbiAgICBwcm90ZWN0ZWRSb3V0ZXM6IFtdXG59O1xuZnVuY3Rpb24gY3JlYXRlQXV0aE1pZGRsZXdhcmUodXNlckNvbmZpZyA9IHt9KSB7XG4gICAgLy8gTWVyZ2UgdXNlciBjb25maWcgd2l0aCBkZWZhdWx0c1xuICAgIGNvbnN0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcpLCB1c2VyQ29uZmlnKTtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gbWlkZGxld2FyZShyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHJlcXVlc3QubmV4dFVybDtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHJlcXVlc3RlZCBwYXRoIGlzIHByb3RlY3RlZFxuICAgICAgICBjb25zdCBpc1Byb3RlY3RlZFJvdXRlID0gY29uZmlnLnByb3RlY3RlZFJvdXRlcy5zb21lKHJvdXRlID0+IHBhdGhuYW1lID09PSByb3V0ZSB8fCBwYXRobmFtZS5zdGFydHNXaXRoKGAke3JvdXRlfS9gKSk7XG4gICAgICAgIC8vIFNraXAgYXV0aCBjaGVjayBmb3Igbm9uLXByb3RlY3RlZCByb3V0ZXNcbiAgICAgICAgaWYgKCFpc1Byb3RlY3RlZFJvdXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VydmVyXzEuTmV4dFJlc3BvbnNlLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgYXV0aGVudGljYXRpb24gc3RhdHVzXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNSZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMfS9hcGkvYXV0aC9zdGF0dXNgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBjb29raWU6IHJlcXVlc3QuaGVhZGVycy5nZXQoJ2Nvb2tpZScpIHx8ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWNoZTogJ25vLXN0b3JlJyxcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc3RhdHVzUmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgc3RhdHVzUmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmF1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yd2FyZCBhbnkgY29va2llcyB0aGF0IG1heSBoYXZlIGJlZW4gc2V0IGR1cmluZyByZWZyZXNoXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gc2VydmVyXzEuTmV4dFJlc3BvbnNlLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2V0Q29va2llSGVhZGVyID0gc3RhdHVzUmVzcG9uc2UuaGVhZGVycy5nZXQoJ3NldC1jb29raWUnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldENvb2tpZUhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1NldC1Db29raWUnLCBzZXRDb29raWVIZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdXRoZW50aWNhdGlvbiBmYWlsZWQgLSByZWRpcmVjdCB0byBsb2dpblxuICAgICAgICAgICAgcmV0dXJuIHJlZGlyZWN0VG9Mb2dpbihyZXF1ZXN0LCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGhlbnRpY2F0aW9uIGNoZWNrIGVycm9yOicsIGVycik7XG4gICAgICAgICAgICByZXR1cm4gcmVkaXJlY3RUb0xvZ2luKHJlcXVlc3QsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcmVkaXJlY3RUb0xvZ2luKHJlcXVlc3QsIGNvbmZpZykge1xuICAgIGNvbnN0IGxvZ2luVXJsID0gbmV3IFVSTChjb25maWcubG9naW5QYXRoKTtcbiAgICBsb2dpblVybC5zZWFyY2hQYXJhbXMuc2V0KCdjbGllbnRfaWQnLCBjb25maWcuY2xpZW50SWQpO1xuICAgIGxvZ2luVXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3JlZGlyZWN0X3VybCcsIGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMfS9hcGkvYXV0aC9jYWxsYmFja2ApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gc2VydmVyXzEuTmV4dFJlc3BvbnNlLnJlZGlyZWN0KGxvZ2luVXJsLnRvU3RyaW5nKCkpO1xuICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IFVSTCBmb3IgcmV0dXJuIGFmdGVyIGxvZ2luXG4gICAgY29uc3QgcmV0dXJuVXJsID0gcmVxdWVzdC5uZXh0VXJsLnBhdGhuYW1lICsgcmVxdWVzdC5uZXh0VXJsLnNlYXJjaDtcbiAgICBjb25zdCBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuICAgIHJlc3BvbnNlLmNvb2tpZXMuc2V0KGF1dGhfMS5SRVRVUk5fVVJMX0NPT0tJRSwgcmV0dXJuVXJsLCB7XG4gICAgICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgICAgICBzZWN1cmU6IGlzUHJvZHVjdGlvbixcbiAgICAgICAgc2FtZVNpdGU6IGlzUHJvZHVjdGlvbiA/ICdub25lJyA6ICdsYXgnLFxuICAgICAgICBtYXhBZ2U6IDEwICogNjAsIC8vIDEwIG1pbnV0ZXNcbiAgICAgICAgcGF0aDogJy8nXG4gICAgfSk7XG4gICAgLy8gQ2xlYXIgYXV0aCBjb29raWVzXG4gICAgcmVzcG9uc2UuY29va2llcy5kZWxldGUoYXV0aF8xLmFjY2Vzc1Rva2VuX0NPT0tJRV9OQU1FKTtcbiAgICByZXNwb25zZS5jb29raWVzLmRlbGV0ZShhdXRoXzEucmVmcmVzaFRva2VuX0NPT0tJRV9OQU1FKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cosmic-authentication/dist/middleware/auth-middleware.js\n");

/***/ })

};
;